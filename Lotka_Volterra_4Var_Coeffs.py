#######################################################################
#####                                                             #####
#####     SPARSE IDENTIFICATION OF NONLINEAR DYNAMICS (SINDy)     #####
#####     Application to the Lotka-Volterra system                #####
#####                                                             #####
#######################################################################

"""

This file calculates both the Euclidean distance between coefficient
vectors (true and inferred) as well as the number of mismatched coefficients
in these two vectors. Time ranges used are [0, 5], [0, 20], and [0, 100], 
with a noise level ranging from 1e-5 to 1e-1. 

The number of mismatched coefficients is calculated by comparing the two
vectors element-by-element and observing which are zero and which are
nonzero.

"""


#--> Import standard python libraries
from math import *
import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

#--> Import some features of scipy to simulate the systems
#    or for matrix manipulation.
from scipy.integrate import odeint
from scipy.linalg import block_diag

#--> Import the PolynomialFeatures function from the sklearn
#    package to easily create the library of candidate functions
#    that will be used in the sparse regression problem.
from sklearn.preprocessing import PolynomialFeatures

#--> Import the sparse identification python package containing
#    the class to create sindy estimators.
import sparse_identification as sp
from sparse_identification.utils import derivative as spder
from sparse_identification.solvers import hard_threshold_lstsq_solve

#--> Import helper functions in Lotka_Volterra_4Var_Gen.py
from Lotka_Volterra_4Var_Gen import *

def make_coefficients(r, a, num_terms):

	"""
	This function organizes the coefficients of the original 
	system in the form generated by the SINDy algorithm.

	Inputs
	------
	r, a : parameters of Lotka-Volterra system. 
		   alpha is 1-dimensional, and beta is 
		   a matrix. 
	num_terms : an integer representing the number of second order
				(and below) polynomials in Theta(x).

	Outputs
	-------
	coeffs : a one-dimensional vector representing the 
			 transformed coefficients.

	"""

	num_vars = 4
	coeffs = np.zeros((num_vars, num_terms))
	for i in range(num_vars):
		coeffs[i, i+1] = r[i]
	coeffs[0, [5, 6, 7, 8]] = a[0]
	coeffs[1, [6, 9, 10, 11]] = a[1]
	coeffs[2, [7, 10, 12, 13]] = a[2]
	coeffs[3, [8, 11, 13, 14]] = a[3]
	
	return coeffs.ravel()

def main(time_range):

	"""
	This function calculates and plots distance between coefficients
	and number of mismatched coefficients as a function of the 
	noise level, taken from 1e-5 to 1e-1. 

	Input
	-----
	time_range : a float representing the amount of time used to 
				 simulate the trajectory.

	"""

	#--> Initializes variables and generates initial conditions.
	r = np.array([1, 0.72, 1.53, 1.27])
	a = np.array([[-1, -1.09, -1.52, 0], 
				  [0, -1*0.72, -0.44*0.72, -1.36*0.72], 
				  [-2.33*1.53, 0, -1.53, -0.47*1.53], 
				  [-1.21*1.27, -0.51*1.27, -0.35*1.27, -1.27]])
	true_coeffs = make_coefficients(r, a, 15)
	t = np.linspace(0, time_range, time_range*20)
	noise_level = np.logspace(-5, -1, 50)
	dist, sparsity = [], []
	initials = gen_init(r, a, t)

	#--> Computes distance between coefficients and number of mismatched
	#	 coefficients for each noise level.
	for noise in noise_level:
		print(noise)
		lst_coefs = model(initials, r, a, t, noise, coeffs=True)

		noise_dist, noise_sparsity = [], []
		for coefs in lst_coefs:
			noise_dist.append(np.linalg.norm(coefs - true_coeffs, ord=2))
			num_mismatch = np.sum([coefs[i] != 0 and true_coeffs[i] == 0 
								   for i in range(len(coefs))])
			noise_sparsity.append(num_mismatch)

		dist.append(np.mean(noise_dist))
		sparsity.append(np.mean(noise_sparsity))

	#--> Plots distance between coefficients and number of mismatched coefficients
	#	 as a function of the noise level.
	fig, ax = plt.subplots(1, 2, figsize=(10, 5))
	ax[0].plot(np.log10(noise_level), dist)
	ax[0].set_title('Distance Between Coefficients for $t \in [0, {}]$'.format(time_range))
	ax[0].set_xlabel('Log(Noise Level)')
	ax[0].set_ylabel('Distance')
	ax[1].plot(np.log10(noise_level), sparsity)
	ax[1].set_title('Number of Mismatched Coefficients for $t \in [0, {}]$'.format(time_range))
	ax[1].set_xlabel('Log(Noise Level)')
	ax[1].set_ylabel('# Mismatched Coefficients')
	plt.savefig('31c_coeffs{}.png'.format(time_range))
	plt.show()

main(5)
main(20)
main(100)
